Требования:
1. Получение всех пользователей:
- Используйте конечную точку GET /users из JSONPlaceholder для получения списка всех пользователей. Документация: JSONPlaceholder
2. Отображение пользователей в таблице:
- Реализуйте таблицу со столбцами: имя, имя пользователя, электронная почта и телефон.
3. Реализуйте расширенную фильтрацию:
- Добавьте поля ввода для поиска для каждого столбца (имя, имя пользователя, электронная почта, телефон).
- Убедитесь, что таблица динамически фильтрует результаты на основе данных, введенных пользователем в эти полей, с обновлением в режиме реального времени.
4. Управление состоянием:
- Используйте Redux для управления состоянием приложения, включая пользовательские данные и состояния фильтров. состояния. Для этой задачи вы можете выбрать Classic Redux или Redux Toolkit.
5. Безопасность типов:
- Применяйте TypeScript во всем веб-приложении, чтобы обеспечить правильной типизации и уменьшения потенциальных ошибок во время выполнения. Это включает в себя все аспекты функциональности приложения.
6. Дизайн и стилизация:
- Дизайн таблиц и поисковых входов должен быть удобным для пользователя и визуально привлекательным. Оформление вы можете выбрать сами, стремясь к чистому и эффективному пользовательскому интерфейсу.


**Во-первых, благодарю за предоставленную возможностью участвовать в этом челендже.**

Вот краткое объяснение моего подхода к решению задачи и некоторых проблем, с которыми я столкнулся:
- я предположил определенную структуру состояния Redux, которая включает в себя список пользователей, набор фильтров и пару флагов. Это очень важно для создания селекторов, которые работают с нужными частями состояния.
- я использовал функцию createSelector из библиотеки redux-toolkit для объединения этих простых селекторов. Эта функция позволяет объединить несколько селекторов в один, более сложный селектор, выполняющий операцию фильтрации. А также мемоизировать результат.
- в комбинированном селекторе я реализовал логику фильтрации. Эта логика применяет различные фильтры к списку пользователей, как по отдельности, так и комбинированно, гарантируя, что будут возвращены только пользователи, соответствующие всем критериям.

Сложности: В процессе объявления переменных во втором параметре функции createSelector, я перепутал их последовательность, что привело к ошибка м в фильтрации, однако баг был довольно быстро найден и устранен.

Вопрос фильтрации телефонных номеров был решён мною с помощью регулярных выражений.

Благодаря решению этих проблем конечное решение эффективно сочетает управление состоянием Redux с мемоизированными комбинированными селекторами для оптимизации производительности и поддержания чистого и эффективного кода.